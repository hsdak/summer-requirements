第一题
输入一个整型数组，数组里有正数也有负数。数组中的一个或连续多个整数组成一个子数组。求所有子数组的和的最大值。
要求时间复杂度为O(n)。
示例1:
输入: nums = [-2,1,-3,4,-1,2,1,-5,4]
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。
提示：
	1 <= arr.length <= 10^5
	-100 <= arr[i] <= 100
c++代码：
动态规划：
int maxSubArray(vector<int>& nums) {
        int maxnum = nums[0];
        for (int i = 1;i< nums.size();++i){
            if (nums[i - 1] > 0){
                nums[i] += nums[i - 1];
            }
            maxnum = max(maxnum,nums[i]);//从左到右将数组的值改为到当前位置子数组的最大值
        }
        return maxnum;
    }
第二题
做菜顺序
一个厨师收集了他 n 道菜的满意程度 satisfaction ，这个厨师做出每道菜的时间都是 1 单位时间。
一道菜的 「喜爱时间」系数定义为烹饪这道菜以及之前每道菜所花费的时间乘以这道菜的满意程度，也就是 time[i]*satisfaction[i] 。
请你返回做完所有菜 「喜爱时间」总和的最大值为多少。
你可以按 任意 顺序安排做菜的顺序，你也可以选择放弃做某些菜来获得更大的总和。
示例 1：
输入：satisfaction = [-1,-8,0,5,-9]
输出：14
解释：去掉第二道和最后一道菜，最大的喜爱时间系数和为 (-1*1 + 0*2 + 5*3 = 14) 。每道菜都需要花费 1 单位时间完成。
示例 2：
输入：satisfaction = [4,3,2]
输出：20
解释：按照原来顺序相反的时间做菜 (2*1 + 3*2 + 4*3 = 20)
示例 3：
输入：satisfaction = [-1,-4,-5]
输出：0
解释：大家都不喜欢这些菜，所以不做任何菜可以获得最大的喜爱时间系数。
示例 4：
输入：satisfaction = [-2,5,-1,0,3,-3]
输出：35
提示：
	n == satisfaction.length
	1 <= n <= 500
	-10^3 <= satisfaction[i] <= 10^3
c++代码：
int maxSatisfaction(vector<int>& satisfaction) {
        int i,j,sum,max=0,time;
        sort(satisfaction.begin(),satisfaction.end());
        for(i=0;i<satisfaction.size();i++){
            sum=0;
            count=1;
            for(j=i;j<satisfaction.size();j++,time++){
                sum+=time*satisfaction[j];
            }
            if(max<=sum){
                max=sum;
            }
        }
        return max;
    }
