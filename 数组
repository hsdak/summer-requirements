一维数组和二维数组
第一题
加一
给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。
最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
你可以假设除了整数 0 之外，这个整数不会以零开头。
代码：
vector<int> plusOne(vector<int>& digits) {
        int num=1;
        for(int i=digits.size()-1;i>=0;i--){
            num+=digits[i];
            digits[i]=num%10;
            num/=10;
            if(!num){
                break;
            }
        }
        if(num==1){
            digits.resize(digits.size()+1,0);
            digits[0]=1;
        }
        return digits;
    }
第二题
删除排序数组中的重复项
给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
代码：
int removeDuplicates(vector<int>& nums) {
        int size=nums.size();
        int count=0;
        for(int i=1;i<size;++i){//查找重复项
            if(nums[i]==nums[i-1]){//对比两项
                count++;//记录重复项数
            }
            nums[i-count]=nums[i];//删除重复项
        }
        return size-count;//返回新长度
    }
第三题
盛水最多的容器
给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，
垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
说明：你不能倾斜容器，且 n 的值至少为 2。
代码：
int maxArea(vector<int>& height) {
        int i,j,v0=0,v;//v0为目前最大盛水量，v计算任意两端之间盛水量
        for(i=0;i<height.size();i++){
            for(j=i+1;j<height.size();j++){//以矮的一端为高
                if(height[i]<height[j]){
                    v=(j-i)*height[i];
                }
                if(height[i]>height[j]){
                    v=(j-i)*height[j];
                }
            }
            if(v>v0){
                v0=v;//更新最大盛水量
            }
        }
        return v0;
    }
