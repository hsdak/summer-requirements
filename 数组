一维数组和二维数组
第一题
加一
给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。
最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
你可以假设除了整数 0 之外，这个整数不会以零开头。
c++代码：
vector<int> plusOne(vector<int>& digits) {
        int num=1;
        for(int i=digits.size()-1;i>=0;i--){
            num+=digits[i];
            digits[i]=num%10;
            num/=10;
            if(!num){
                break;
            }
        }
        if(num==1){
            digits.resize(digits.size()+1,0);
            digits[0]=1;
        }
        return digits;
    }
第二题
删除排序数组中的重复项
给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
c++代码：
int removeDuplicates(vector<int>& nums) {
        int size=nums.size();
        int count=0;
        for(int i=1;i<size;++i){//查找重复项
            if(nums[i]==nums[i-1]){//对比两项
                count++;//记录重复项数
            }
            nums[i-count]=nums[i];//删除重复项
        }
        return size-count;//返回新长度
    }
第三题
盛水最多的容器
给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，
垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。
说明：你不能倾斜容器，且 n 的值至少为 2。
c++代码：
int maxArea(vector<int>& height) {
        int i,j,v0=0,v;//v0为目前最大盛水量，v计算任意两端之间盛水量
        for(i=0;i<height.size();i++){
            for(j=i+1;j<height.size();j++){//以矮的一端为高
                if(height[i]<height[j]){
                    v=(j-i)*height[i];
                }
                if(height[i]>height[j]){
                    v=(j-i)*height[j];
                }
            }
            if(v>v0){
                v0=v;//更新最大盛水量
            }
        }
        return v0;
    }
第四题
给你一个整数数组 nums，每次 操作 会从中选择一个元素并 将该元素的值减少 1。
如果符合下列情况之一，则数组 A 就是 锯齿数组：
	每个偶数索引对应的元素都大于相邻的元素，即 A[0] > A[1] < A[2] > A[3] < A[4] > ...
	或者，每个奇数索引对应的元素都大于相邻的元素，即 A[0] < A[1] > A[2] < A[3] > A[4] < ...
返回将数组 nums 转换为锯齿数组所需的最小操作次数。
c++代码：
int movesToMakeZigzag(vector<int>& nums) {
        int i,count1=0,count2=0;
        i=1;
        while(i<nums.size()){//偶数索引的情况
            if(nums[i]>nums[i-1]){
                count1++;
                continue;
            }
            if(nums[i]>nums[i+1]){
                count1++;
                continue;
            }
            i+=2;
        }
        i=0;
        while(i<nums.size()){//奇数索引的情况
            if(i=0){
                if(nums[i]>nums[i+1]){
                    count2++;
                    continue;
                }
            }
            else{
                if(nums[i]>nums[i-1]){
                    count2++;
                    continue;
                }
                if(nums[i]>nums[i+1]){
                    count2++;
                    continue;
                }
            }
        }
        //比较哪种更短并输出
        if(count1>=count2){
            return count2;
        }
        else{
            return count1;
        }
    }
第五题
合并两个有序数组
给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。
说明:
	初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。
	你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n）来保存 nums2 中的元素。
c++代码：
void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        for(int n:nums2){//将nums2的元素加到nums1最后一个元素的后面
            nums1[m++]=n;
        }
        sort(nums1.begin(),nums1.end());//对整合后的数组进行排序
    }
第六题
和为k的子数组
给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。

示例 1 :

输入:nums = [1,1,1], k = 2
输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。
说明 :
	数组的长度为 [1, 20,000]。
	数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]。
c++代码：
int subarraySum(vector<int>& nums, int k) {
        int i,j,count=0,a;
        for(i=0;i<nums.size();i++){
            a=nums[i];
            for(j=i;j<nums.size();j++){
                if(a==k){//合为k则计数加一
                    count++;
                }
                a+=nums[j];
                if(a>k){//若子数组的和超过k则进入下一个循环
                    break;
                }
            }
        }
        return count;
    }
第七题：
将每个元素替换为右侧最大元素
给你一个数组 arr ，请你将每个元素用它右边最大的元素替换，如果是最后一个元素，用 -1 替换。
完成所有替换操作后，请你返回这个数组。
示例：
输入：arr = [17,18,5,4,6,1]
输出：[18,6,6,6,1,-1]
提示：
	1 <= arr.length <= 10^4
	1 <= arr[i] <= 10^5
c++代码：
vector<int> replaceElements(vector<int>& arr) {
        int i,j,max;
        for(i=0;i<arr.size();i++){
            max=arr[i+1];
            for(j=i+2;j<arr.size();j++){
                if(arr[j]>max){
                    max=arr[j];//寻找右侧最大元素
                }
            }
            arr[i]=max;//替换
        }
        arr[arr.size()-1]=-1;
        return arr;
    }
第八题
去掉最低工资和最高工资后的平均工资
给你一个整数数组 salary ，数组里每个数都是 唯一 的，其中 salary[i] 是第 i 个员工的工资。
请你返回去掉最低工资和最高工资以后，剩下员工工资的平均值。
c++代码：
double average(vector<int>& salary) {
        int i,max=0,min=0,a=0;
        for(i=1;i<salary.size();i++){
            if(salary[i]>salary[max]){//选出最高工资下标
                max=i;
            }
            if(salary[i]<salary[min]){//选出最低工资下标
                min=i;
            }
        }
        for(i=0;i<salary.size();i++){
            if(i!=max&&i!=min){
                a+=salary[i];
            }
        }
        return a/(salary.size()-2);//返回平均值
    }
第九题
探索插入位置
给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。
你可以假设数组中无重复元素。
c++代码：
int searchInsert(vector<int>& nums, int target) {
        int i;
        for(i=0;i<nums.size();i++){
            if(target<=nums[i]){
                return i;
            }
        }
        return i;
    }
 第十题
 统计有序数列中的负数
 给你一个 m * n 的矩阵 grid，矩阵中的元素无论是按行还是按列，都以非递增顺序排列。 
请你统计并返回 grid 中 负数 的数目。
 c++代码：
int countNegatives(vector<vector<int>>& grid) {
        int count = 0;
        for(int i = 0;i<grid.size();i++){//遍历查找
            for(int j= 0;j<col = grid[0].size();j++){
                if(grid[i][j]<0)
                    count++;
            }
        }
        return count;
    }
给定一个直方图(也称柱状图)，假设有人从上面源源不断地倒水，最后直方图能存多少水量?直方图的宽度为 1。
上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的直方图，在这种情况下，可以接 6 个单位的水（蓝色部分表示水）。
c++代码：
int trap(vector<int>& height) {
        int ans=0,j;
        for(int i=1;i<height.size()-1;i++){
            int max1=height[i],max2=height[i];
            for(j=i-1;j>=0;j--){
                if(height[j]>height[i]){
                    max1=height[j];
                }
            }
            for(j=i+1;j<height.size();j++){
                if(height[j>height[i]]){
                    max2=height[j];
                }
            }
            if(max1>=max2){
                ans+=max1-height[i];
            }
            else{
                ans+=max2-height[i];
            }
        }
        return ans;
    }
第十一题
餐厅过滤器
给你一个餐馆信息数组 restaurants，其中  restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]。你必须使用以下三个过滤器来过滤这些餐馆信息。
其中素食者友好过滤器 veganFriendly 的值可以为 true 或者 false，如果为 true 就意味着你应该只包括 veganFriendlyi 为 true 的餐馆，为 false 则意味着可以包括任何餐馆。
此外，我们还有最大价格 maxPrice 和最大距离 maxDistance 两个过滤器，它们分别考虑餐厅的价格因素和距离因素的最大值。
过滤后返回餐馆的 id，按照 rating 从高到低排序。如果 rating 相同，那么按 id 从高到低排序。简单起见， veganFriendlyi 和 veganFriendly 为 true 时取值为 1，为 false 时，取值为 0 。
c++代码：
vector<int> filterRestaurants(vector<vector<int>>& restaurants, int veganFriendly, int maxPrice, int maxDistance) {
        vector<pair<int, int>> rank;
        for (auto& r : restaurants) {
            if (veganFriendly) if (!r[2]) continue;
            if (r[3] > maxPrice || r[4] > maxDistance) continue;
            rank.emplace_back(make_pair(r[1], r[0]));
        }
        sort(rank.rbegin(), rank.rend());

        vector<int> ans;
        for (auto& r : rank)
            ans.emplace_back(r.second);
        return ans;
    }
第十二题
最长连续序列
给定一个未排序的整数数组，找出最长连续序列的长度。
要求算法的时间复杂度为 O(n)。
示例:
输入: [100, 4, 200, 1, 3, 2]
输出: 4
解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。
c++代码：
public int longestConsecutive(int[] nums) {
        Set<Integer> num_set = new HashSet<Integer>();
        for (int num : nums) {
            num_set.add(num);
        }
        int longestStreak = 0;
        for (int num : num_set) {
            if (!num_set.contains(num - 1)) {
                int currentNum = num;
                int currentStreak = 1;
                while (num_set.contains(currentNum + 1)) {
                    currentNum += 1;
                    currentStreak += 1;
                }
                longestStreak = Math.max(longestStreak, currentStreak);
            }
        }
        return longestStreak;
    }
    第十三题
公交站间的距离
环形公交路线上有 n 个站，按次序从 0 到 n - 1 进行编号。我们已知每一对相邻公交站之间的距离，distance[i] 表示编号为 i 的车站和编号为 (i + 1) % n 的车站之间的距离。
环线上的公交车都可以按顺时针和逆时针的方向行驶。
返回乘客从出发点 start 到目的地 destination 之间的最短距离。
int distanceBetweenBusStops(vector<int>& distance, int start, int destination) {
        int cd1=0,cd2=0;//current distance 1 and current distance 2
        for(int i=start;i<destination;i++){
            cd1+=distance[i];
        }
        for(int j=destination;j<distance.size();j++){
            cd2+=distance[j];
        }
        if(cd1>=cd2)return cd2;
        else return cd1;
    }
第十四题
主要元素
数组中占比超过一半的元素称之为主要元素。给定一个整数数组，找到它的主要元素。若没有，返回-1。
int majorityElement(vector<int>& nums) {
        sort(nums.begin(), nums.end());//排成顺序
        int len = nums.size();
        int cmp = nums[len / 2];
        if(count(nums.begin(), nums.end(), cmp) > len / 2) {//如果占据超过一半，则一定是中位数
            return cmp;
        }
        return -1;
    }
第十五题
缀点成线
在一个 XY 坐标系中有一些点，我们用数组 coordinates 来分别记录它们的坐标，其中 coordinates[i] = [x, y] 表示横坐标为 x、纵坐标为 y 的点。
请你来判断，这些点是否在该坐标系中属于同一条直线上，是则返回 true，否则请返回 false。
c++代码：
bool checkStraightLine(vector<vector<int>>& coordinates) {
        double a,b;//直接比较双精度浮点型斜率
        int flag=1;
        a=(double)(coordinates[1][1]-coordinates[0][1])/(double)(coordinates[1][0]-coordinates[0][0]);
        for(int i=3;i<coordinates.size();i++){
            b=double(coordinates[i][1]-coordinates[0][1])/(double)(coordinates[i][0]-coordinates[0][0]);
            if(a!=b){
                flag=0;
                break;
            }
        }
        if(flag==0)return false;
        else return true;
    }
};
第十六题
可以被一步捕获的棋子数
在一个 8 x 8 的棋盘上，有一个白色的车（Rook），用字符 'R' 表示。棋盘上还可能存在空方块，白色的象（Bishop）以及黑色的卒（pawn），分别用字符 '.'，'B' 和 'p' 表示。
不难看出，大写字符表示的是白棋，小写字符表示的是黑棋。
车按国际象棋中的规则移动。东，西，南，北四个基本方向任选其一，然后一直向选定的方向移动，直到满足下列四个条件之一：
	棋手选择主动停下来。
	棋子因到达棋盘的边缘而停下。
	棋子移动到某一方格来捕获位于该方格上敌方（黑色）的卒，停在该方格内。
	车不能进入/越过已经放有其他友方棋子（白色的象）的方格，停在友方棋子前。
你现在可以控制车移动一次，请你统计有多少敌方的卒处于你的捕获范围内（即，可以被一步捕获的棋子数）。
c++代码：
int numRookCaptures(vector<vector<char>>& board) {
        int i,j,a,b,count=0;
        for(i=0;i<8;i++){//locate the rook
            for(j=0;j<8;j++){
                if(board[i][j]=='R'){
                    a=i;
                    b=j;
                }
            }
        }
        for(i=a+1;i<8;i++){//southward
            if(board[i][b]=='p'){
                count++;
                break;
            }
            if(board[i][b]=='B'){
                break;
            }
        }
        for(i=a-1;i>=0;i--){//northward
            if(board[i][b]=='p'){
                count++;
                break;
            }
            if(board[i][b]=='B'){
                break;
            }
        }
        for(i=b+1;i<8;i++){//eastward
            if(board[a][i]=='p'){
                count++;
                break;
            }
            if(board[a][i]=='B'){
                break;
            }
        }
        for(i=b-1;i>=0;i--){//westward
            if(board[a][i]=='p'){
                count++;
                break;
            }
            if(board[a][i]=='B'){
                break;
            }
        }
        return count;
    }
    第十七题
爱生气的书店老板
今天，书店老板有一家店打算试营业 customers.length 分钟。每分钟都有一些顾客（customers[i]）会进入书店，所有这些顾客都会在那一分钟结束后离开。
在某些时候，书店老板会生气。 如果书店老板在第 i 分钟生气，那么 grumpy[i] = 1，否则 grumpy[i] = 0。 当书店老板生气时，那一分钟的顾客就会不满意，不生气则他们是满意的。
书店老板知道一个秘密技巧，能抑制自己的情绪，可以让自己连续 X 分钟不生气，但却只能使用一次。
请你返回这一天营业下来，最多有多少客户能够感到满意的数量。
示例：
输入：customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3
输出：16
解释：
书店老板在最后 3 分钟保持冷静。
感到满意的最大客户数量 = 1 + 1 + 1 + 1 + 7 + 5 = 16.
c++代码：
int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {
        int i,j,max=0,num;
        for(i=0;i<grumpy.size()-X;i++){
            num=0;
            for(j=0;j<i;j++){//控制住自己之前
                num+=customers[j]*grumpy[j];
            }
            for(j=i;j<i+X;j++){//控制住自己的几分钟
                num+=customers[j];
            }
            for(j=i+X;j<grumpy.size();j++){//失控之后
                num+=customers[j]*grumpy[j];
            }
            if(max<num){
                max=num;
            }
        }
        return max;
    }
