一维数组和二维数组
第一题：加一
给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。
最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。
你可以假设除了整数 0 之外，这个整数不会以零开头。
vector<int> plusOne(vector<int>& digits) {
        int num=1;
        for(int i=digits.size()-1;i>=0;i--){
            num+=digits[i];
            digits[i]=num%10;
            num/=10;
            if(!num){
                break;
            }
        }
        if(num==1){
            digits.resize(digits.size()+1,0);
            digits[0]=1;
        }
        return digits;
    }
第二题
删除排序数组中的重复项
给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
int removeDuplicates(vector<int>& nums) {
        int size=nums.size();
        int count=0;
        for(int i=1;i<size;++i){//查找重复项
            if(nums[i]==nums[i-1]){//对比两项
                count++;//记录重复项数
            }
            nums[i-count]=nums[i];//删除重复项
        }
        return size-count;//返回新长度
    }
