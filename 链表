第一题
链表相交
给定两个（单向）链表，判定它们是否相交并返回交点。请注意相交的定义基于节点的引用，而不是基于节点的值。
换句话说，如果一个链表的第k个节点与另一个链表的第j个节点是同一节点（引用完全相同），则这两个链表相交。示
例 1：
输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3
输出：Reference of the node with value = 8输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。
思路：双指针分别从两链表头结点每步一个链节走到尾结点，再从另一个头结点走到交点，经过的链节数量相同。
c++代码：
 ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *t1 = headA; ListNode *t2 = headB;
        while(t1 != t2){
            if (t1 == NULL)
                t1 = headB;
            else t1 = t1->next;
            if (t2 == NULL)
                t2 = headA;
            else t2 = t2->next;
        }
        return t1;
    }
第二题：
返回倒数第K个节点
实现一种算法，找出单向链表中倒数第 k 个节点。返回该节点的值。
注意：本题相对原题稍作改动
示例：
输入： 1->2->3->4->5 和 k = 2
输出： 4
说明：
给定的 k 保证是有效的。
思路：先将前指针与后指针的距离固定好，之后同步前进，直到前指针走到结尾为止。
c++代码：
int kthToLast(ListNode* head, int k) {
        ListNode *p1=head,*p2=head;
        if(head==NULL){
            return 0;
        }
        while(k--){
            p2=p2->next;
        }
        while(p2!=NULL){
            p2=p2->next;
            p1=p1->next;
        }
        return p1->val;
    }
第三题
删除中间节点
实现一种算法，删除单向链表中间的某个节点（即不是第一个或最后一个节点），假定你只能访问该节点。
示例：
输入：单向链表a->b->c->d->e->f中的节点c
结果：不返回任何数据，但该链表变为a->b->d->e->f
思路：这只是一个玩笑罢了，其实解决不了实际问题。
c++代码：
void deleteNode(ListNode* node) {
        node->val = node->next->val;
        node->next = node->next->next;
    }
第四题
二进制链表转整数
给你一个单链表的引用结点 head。链表中每个结点的值不是 0 就是 1。已知此链表是一个整数数字的二进制表示形式。
请你返回该链表所表示数字的 十进制值 。
思路：从最左边的一位数开始，每次左移一位，再加上右边的一位数，加到最右端为止。
c++代码：
int getDecimalValue(ListNode* head) {
        ListNode*p;
        int sum=0;
        while(p!=0){
            sum=(sum<<1)+p->val;
            p=p->next;
        }
        return sum;
    }
第五题
环形链表
给定一个链表，判断链表中是否有环。
思路：快指针与慢指针相遇，则有环；快指针到头，则无环。
c++代码：
bool hasCycle(ListNode *head) {
        ListNode *p1=head,*p2=head;
        while(p2!=0){
            if(p2->next==0){
                break;
            }
            else{
                p2=p2->next->next;
            }
            p1=p1->next;
            if(p1==p2){
                return true;
            }
        }
        return false;
    }
第六题
回文链表
请判断一个链表是否为回文链表。
示例 1:
输入: 1->2
输出: false
示例 2:
输入: 1->2->2->1
输出: true
进阶：
你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？
思路：将链表的值录入数组再行判断数组是否为回文
c++代码：
bool isPalindrome(ListNode* head) {
        vector<int>a;
        while(head){
            a.push_back(head->val); 
            head = head->next; 
        }
        for(int i=0; i<a.size()/2;++i){
            if(a[i] != a[a.size()-1-i]){
                return false;
            }
        }
        return true;
    }
第七题
合并两个有序链表
将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 
示例：
输入：1->2->4, 1->3->4
输出：1->1->2->3->4->4
思路：将两个链表的值存入数组，排序后新建链表进行储存
c++代码：
vector<int> A;
ListNode *tempL1 = l1;
while (tempL1 != nullptr) {
	A.push_back(tempL1->val);
	tempL1 = tempL1->next;
}
ListNode *tempL2 = l2;
while (tempL2 != nullptr) {
	A.push_back(tempL2->val);
	tempL2 = tempL2->next;
}
sort(A.begin(), A.end(), less<int>());

ListNode *l3 = new ListNode(0);
ListNode *ptr = l3;
for (auto iter = A.begin(); iter != A.end(); ++iter)
{
	ListNode *temp = new ListNode(*iter);
	ptr->next = temp;
	ptr = ptr->next;
}
return l3->next;
