第一题
转化为小写字母
思路：从头遍历，若是大写字母，则通过ascii码加32转化为小写
c++ code:
string toLowerCase(string str) {
        for(int i=0;i<str.size();i++){
            if(str[i]>=65&&str[i]<=90){
                str[i]+=32;
            }
        }
        return str;
    }
第二题
翻转字符串里的单词
给定一个字符串，逐个翻转字符串中的每个单词。
示例 1:
输入: "the sky is blue"
输出: "blue is sky the"
示例 2：
输入: "  hello world!  "
输出: "world! hello"
解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
示例 3：
输入: "a good   example"
输出: "example good a"
解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
说明：
	无空格字符构成一个单词。
	输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
	如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
思路：先翻转字符串，再翻转每一个单词
c++ code:
string reverseWords(string s) {
        // 反转整个字符串
        reverse(s.begin(), s.end());
        int n = s.size();
        int idx = 0;
        for (int start = 0; start < n; ++start) {
            if (s[start] != ' ') {
                // 填一个空白字符然后将idx移动到下一个单词的开头位置
                if (idx != 0) s[idx++] = ' ';
                // 循环遍历至单词的末尾
                int end = start;
                while (end < n && s[end] != ' ') s[idx++] = s[end++];
                // 反转整个单词
                reverse(s.begin() + idx - (end - start), s.begin() + idx);
                // 更新start，去找下一个单词
                start = end;
            }
第三题
气球的最大数量
给你一个字符串 text，你需要使用 text 中的字母来拼凑尽可能多的单词 "balloon"（气球）。
字符串 text 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 "balloon"。
示例 1：
输入：text = "nlaebolko"
输出：1
示例 2：
输入：text = "loonbalxballpoon"
输出：2
示例 3：
输入：text = "leetcode"
输出：0
提示：
	1 <= text.length <= 10^4
	text 全部由小写英文字母组成
思路：从每一个字母考虑能拼多少个气球，再取最小值
c++ code:
int maxNumberOfBalloons(string text) {
        int a[5]={0};//储存从每一个字母考虑能拼的单词数
        for(int n:text){//从前往后数每一个字母有多少个
            if(n=='b')a[0]++;
            if(n=='a')a[1]++;
            if(n=='l')a[2]++;
            if(n=='o')a[3]++;
            if(n=='n')a[4]++;
        }
        a[2]/=2;
        a[3]/=2;
        for(int i=0;i<4;i++){//冒泡排序使a[4]为最小值
            if(a[i]<a[i+1]){
                a[i+1]=a[i];
            }
        }
        return a[4];
    }
