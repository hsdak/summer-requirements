第一题
转化为小写字母
思路：从头遍历，若是大写字母，则通过ascii码加32转化为小写
c++ code:
string toLowerCase(string str) {
        for(int i=0;i<str.size();i++){
            if(str[i]>=65&&str[i]<=90){
                str[i]+=32;
            }
        }
        return str;
    }
第二题
翻转字符串里的单词
给定一个字符串，逐个翻转字符串中的每个单词。
示例 1:
输入: "the sky is blue"
输出: "blue is sky the"
示例 2：
输入: "  hello world!  "
输出: "world! hello"
解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
示例 3：
输入: "a good   example"
输出: "example good a"
解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
说明：
	无空格字符构成一个单词。
	输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
	如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。
思路：先翻转字符串，再翻转每一个单词
c++ code:
string reverseWords(string s) {
        // 反转整个字符串
        reverse(s.begin(), s.end());
        int n = s.size();
        int idx = 0;
        for (int start = 0; start < n; ++start) {
            if (s[start] != ' ') {
                // 填一个空白字符然后将idx移动到下一个单词的开头位置
                if (idx != 0) s[idx++] = ' ';
                // 循环遍历至单词的末尾
                int end = start;
                while (end < n && s[end] != ' ') s[idx++] = s[end++];
                // 反转整个单词
                reverse(s.begin() + idx - (end - start), s.begin() + idx);
                // 更新start，去找下一个单词
                start = end;
            }
第三题
气球的最大数量
给你一个字符串 text，你需要使用 text 中的字母来拼凑尽可能多的单词 "balloon"（气球）。
字符串 text 中的每个字母最多只能被使用一次。请你返回最多可以拼凑出多少个单词 "balloon"。
示例 1：
输入：text = "nlaebolko"
输出：1
示例 2：
输入：text = "loonbalxballpoon"
输出：2
示例 3：
输入：text = "leetcode"
输出：0
提示：
	1 <= text.length <= 10^4
	text 全部由小写英文字母组成
思路：从每一个字母考虑能拼多少个气球，再取最小值
c++ code:
int maxNumberOfBalloons(string text) {
        int a[5]={0};//储存从每一个字母考虑能拼的单词数
        for(int n:text){//从前往后数每一个字母有多少个
            if(n=='b')a[0]++;
            if(n=='a')a[1]++;
            if(n=='l')a[2]++;
            if(n=='o')a[3]++;
            if(n=='n')a[4]++;
        }
        a[2]/=2;
        a[3]/=2;
        for(int i=0;i<4;i++){//冒泡排序使a[4]为最小值
            if(a[i]<a[i+1]){
                a[i+1]=a[i];
            }
        }
        return a[4];
    }
第四题
解码方法
一条包含字母 A-Z 的消息通过以下方式进行了编码：
'A' -> 1
'B' -> 2
...
'Z' -> 26
给定一个只包含数字的非空字符串，请计算解码方法的总数。
示例 1:
输入: "12"
输出: 2
解释: 它可以解码为 "AB"（1 2）或者 "L"（12）。
示例 2:
输入: "226"
输出: 3
解释: 它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
c++ code:
int numDecodings(string s) {
    if (s[0] == '0') return 0;
    int pre = 1, curr = 1;
    for (int i = 1; i < s.size(); i++) {
        int tmp = curr;
        if (s[i] == '0')
            if (s[i - 1] == '1' || s[i - 1] == '2') curr = pre;
            else return 0;
        else if (s[i - 1] == '1' || (s[i - 1] == '2' && s[i] >= '1' && s[i] <= '6'))
            curr = curr + pre;
        pre = tmp;
    }
    return curr;
}
第五题
上升下降字符串：
给你一个字符串 s ，请你根据下面的算法重新构造字符串：
	从 s 中选出 最小 的字符，将它 接在 结果字符串的后面。
	从 s 剩余字符中选出 最小 的字符，且该字符比上一个添加的字符大，将它 接在 结果字符串后面。
	重复步骤 2 ，直到你没法从 s 中选择字符。
	从 s 中选出 最大 的字符，将它 接在 结果字符串的后面。
	从 s 剩余字符中选出 最大 的字符，且该字符比上一个添加的字符小，将它 接在 结果字符串后面。
	重复步骤 5 ，直到你没法从 s 中选择字符。
	重复步骤 1 到 6 ，直到 s 中所有字符都已经被选过。
在任何一步中，如果最小或者最大字符不止一个 ，你可以选择其中任意一个，并将其添加到结果字符串。
请你返回将 s 中字符重新排序后的 结果字符串 。
示例 1：
输入：s = "aaaabbbbcccc"
输出："abccbaabccba"
解释：第一轮的步骤 1，2，3 后，结果字符串为 result = "abc"
第一轮的步骤 4，5，6 后，结果字符串为 result = "abccba"
第一轮结束，现在 s = "aabbcc" ，我们再次回到步骤 1
第二轮的步骤 1，2，3 后，结果字符串为 result = "abccbaabc"
第二轮的步骤 4，5，6 后，结果字符串为 result = "abccbaabccba"
示例 2：
输入：s = "rat"
输出："art"
解释：单词 "rat" 在上述算法重排序以后变成 "art"
示例 3：
输入：s = "leetcode"
输出："cdelotee"
示例 4：
输入：s = "ggggggg"
输出："ggggggg"
示例 5：
输入：s = "spo"
输出："ops"
提示：
	1 <= s.length <= 500
	s 只包含小写英文字母。
c++ code:
class Solution {
public:
    int h[26];

    inline bool haveChar() {
        for (int i = 0; i < 26; ++i) {
            if (h[i]) {
                return true;
            }
        }
        return false;
    }

    string sortString(string s) {
        for (const auto &c: s) ++h[c - 'a'];

        string ret;

        auto appendChar = [&] (int p) {
            if (h[p]) {
                --h[p];
                ret.push_back(p + 'a');
            }
        };

        while (true) {
            if (!haveChar()) break;
            for (int i = 0; i < 26; ++i) appendChar(i);
            for (int i = 25; i >= 0; --i) appendChar(i);
        }

        return ret;
    }
};
第六题
变位词组：
编写一种方法，对字符串数组进行排序，将所有变位词组合在一起。变位词是指字母相同，但排列不同的字符串。
注意：本题相对原题稍作修改
示例:
输入: ["eat", "tea", "tan", "ate", "nat", "bat"],
输出:
[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]
说明：
	所有输入均为小写字母。
	不考虑答案输出的顺序。
c++ code:
vector<vector<string>> groupAnagrams(vector<string> &strs){
        if(strs.empty())
            return {{}};
        int size = strs.size();
        vector<vector<string>> res;
        vector<string> tmp = strs;
        unordered_map<string, vector<string>> strsMap;
        for(int i = 0; i < size; i++){
            sort(tmp[i].begin(), tmp[i].end());
            strsMap[tmp[i]].push_back(strs[i]);
        }
        for(auto s : strsMap){
            res.push_back(s.second);
        }
        return res;
    }
第七题
字符串中的单词数
统计字符串中的单词个数，这里的单词指的是连续的不是空格的字符。
请注意，你可以假定字符串里不包括任何不可打印的字符。
示例:
输入: "Hello, my name is John"
输出: 5
解释: 这里的单词是指连续的不是空格的字符，所以 "Hello," 算作 1 个单词。
思路：从前往后数
c++ code:
int countSegments(string s) {
        bool mark = true;
        int count = 0;
        for(int i = 0 ;i<s.length();i++)
        {
            if(s[i]!=' '&&mark) {count++;mark = false;}
            else if(s[i]==' ') mark = true;
        }
        return count;
    }
第八题
左旋转字符串
字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串"abcdefg"和数字2，该函数将返回左旋转两位得到的结果"cdefgab"。
示例 1：
输入: s = "abcdefg", k = 2
输出: "cdefgab"
示例 2：
输入: s = "lrloseumgh", k = 6
输出: "umghlrlose"
限制：
	1 <= k < s.length <= 10000
思路：新定义一个字符串，先将原字符串n位以后的部分追加到新字符串中，再追加剩余的部分。
c++ code:
string reverseLeftWords(string s, int n) {
        string ans;
        int i;
        for(i=n;i<s.size();i++){
            ans.push_back(s[i]);
        }
        for(i=0;i<n;i++){
            ans.push_back(s[i]);
        }
        return ans;
    }
